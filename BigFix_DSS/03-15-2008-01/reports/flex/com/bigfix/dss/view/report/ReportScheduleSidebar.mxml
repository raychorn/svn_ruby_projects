<?xml version="1.0" encoding="utf-8"?>
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:bfcontrols="com.bigfix.extensions.controls.*"
	xmlns:dssgeneral="com.bigfix.dss.view.general.*"
	xmlns:dates="com.bigfix.dss.view.general.dates.*"
	width="100%" height="100%"
	creationComplete="init()"
	>
	<mx:Script><![CDATA[
		import com.bigfix.dss.util.StringUtils;
		import com.bigfix.dss.util.DateUtils;
		import com.bigfix.dss.view.report.events.SignalUpdateReportsEvent;
		import com.bigfix.dss.util.ArrayCollectionUtils;
		import com.bigfix.dss.objects.ICalendar.CalendarNode;
		import com.bigfix.dss.view.general.Alert.AlertPopUp;
		import mx.controls.Alert;
		import mx.states.State;
		import mx.events.ItemClickEvent;
		import com.bigfix.dss.model.DSSModelLocator;
		import com.bigfix.dss.vo.ReportVO;
		import com.bigfix.dss.event.SetReportScheduleEvent;
		
		[Bindable]
		private var model:DSSModelLocator = DSSModelLocator.getInstance();
		
		[Bindable]
		private var dataReportDestination:Array = [StringUtils.ucaseFirst(ReportVO.DESTINATION_PRINTER),StringUtils.ucaseFirst(ReportVO.DESTINATION_EMAIL),StringUtils.ucaseFirst(ReportVO.DESTINATION_PRINTER_EMAIL)];

		private var calNode:CalendarNode;
		
		public var isVisible:Boolean = false;
		
		private var delayedChanges:Array = [];
		
		[Event(name="signalUpdateReports", type="com.bigfix.dss.view.report.events.SignalUpdateReportsEvent")]

		private static function translateToICal(freq:String):String{
			switch (freq){
				case "Hourly":
					return CalendarNode.FREQ_HOURLY;
				case "Daily":
					return CalendarNode.FREQ_DAILY;
				case "Weekly":
					return CalendarNode.FREQ_WEEKLY;
				case "Monthly":
					return CalendarNode.FREQ_MONTHLY;
				case "Monday":
				case "M":
					return CalendarNode.WEEKDAY_MONDAY;
				case "Tuesday":
				case "T":
					return CalendarNode.WEEKDAY_TUESDAY;
				case "Wednesday":
				case "W":
					return CalendarNode.WEEKDAY_WEDNESDAY;
				case "Thursday":
				case "Th":
					return CalendarNode.WEEKDAY_THURSDAY;
				case "Friday":
				case "F":
					return CalendarNode.WEEKDAY_FRIDAY;
				case "Saturday":
				case "Sa":
					return CalendarNode.WEEKDAY_SATURDAY;
				case "Sunday":
				case "Su":
					return CalendarNode.WEEKDAY_SUNDAY;
				case "First":
					return "1";
				case "Second":
					return "2";
				case "Third":
					return "3";
				case "Fourth":
					return "4";
				case "Last":
					return "-1";
				case "Second to Last":
					return "-2";
				default:
					throw new ArgumentError("given string is not translatable into iCAL format");
			}
		}

		private function resetFields(calNode:CalendarNode = null):void {
			this.selectFrequency.selectedIndex = ((calNode == null) ? 0 : ArrayCollectionUtils.findIndexOfItemCaseless(this.selectFrequency.dataProvider, "label", calNode.freqInterval));
			this.selectStartDate.selectedDate = ((calNode == null) ? null : calNode.startDate);
			this.selectStartTime.populateFrom((calNode == null) ? null : calNode.startDate);
			if (calNode != null) {
				this.onSelectFrequency();
			}
		}
		
		public function populateFields(reportVO:ReportVO):void {
			this.delayedChanges = [];
			this.calNode = new CalendarNode();
			this.calNode.fromCalendarSpec(reportVO.next_scheduled_run);
			this.resetFields();
			if (this.isVisible) {
				this.resetFields(this.calNode);
			}
			var i:int = ArrayCollectionUtils.findIndexOfItemCaseless(this.selectDestination.dataProvider, "", reportVO.destination);
			if (i > -1) {
				this.selectDestination.selectedIndex = i; 
			}
		}

		private function init(): void {
			currentState="One Time";
			setDateSelectPrompt();
		}
		
		private function selectStartDateInit():void {
			//set selectable range to date equal or after current day
			var startDate:Date = new Date();
			startDate.setDate(startDate.getDate()-1);
			selectStartDate.selectableRange={"rangeStart": startDate};

			this.selectFrequency.selectedIndex = ArrayCollectionUtils.findIndexOfItemCaseless(this.selectFrequency.dataProvider, "label", this.calNode.freqInterval);
			
			this.selectStartDate.selectedDate = this.calNode.startDate;
			this.selectStartTime.populateFrom(this.calNode.startDate);
			
			this.onSelectFrequency();
			
			this.isVisible = true;
		}
		
		private function applyClick():void {
			for each(var report:ReportVO in model.currentReports){
				var iCalOutput:String = new String();
				var startDate:Date = selectStartDate.selectedDate;
				
				if (!startDate) {
					AlertPopUp.info("Please Select a start date first");
					return;
				}
				
				var calNode:CalendarNode = new CalendarNode();
				calNode.fromCalendarDateTime(new Date(startDate.fullYear, startDate.month, startDate.date, selectStartTime.getHour24(), selectStartTime.getMinute()));
				iCalOutput += calNode.iCalendarSpec();
				
				if (currentState != CalendarNode.ONE_TIME){
					iCalOutput += ";" + CalendarNode.RRULE + ":" + CalendarNode.FREQ + "=" + translateToICal(selectFrequency.text)
							   	+ ";" + CalendarNode.INTERVAL + "="+selectInterval.value;
					switch (currentState){
						case CalendarNode.WEEKLY:
							if(!selectDay.selectedLabels){
								AlertPopUp.info("Please select the days this schedule is set to run");
								return;
							}
							iCalOutput += ";" + CalendarNode.INTERVAL_BYDAY + "=" + StringUtils.replaceAll(String(selectDay.selectedLabels.map(function(item:String, index:int, array:Array):String{return translateToICal(item)})), ",", "|");
							break;
							
						case CalendarNode.MONTHLY:
							switch(selectMonthlyMetric.selectedValue){
								case "selectMultipleDays":
									if(!selectMultipleDays.selectedDates){
										AlertPopUp.info("Please select the dates this schedule is set to run");
										return;
									}
									iCalOutput += ";" + CalendarNode.INTERVAL_BYMONTHDAY + "=" + (selectMultipleDays.selectedDates).join("|");
									break;
								case "selectOneDay":
									iCalOutput += ";"+ CalendarNode.INTERVAL_BYDAY + "=" + translateToICal(this.selectMonthlyCount.selectedLabel) + translateToICal(this.selectMonthlyDay.selectedLabel);
									break;
								default:
									AlertPopUp.info("Please select the dates this schedule is set to run");
									return;
							}
							break;
					}
				}
				this.dispatchEvent(new SignalUpdateReportsEvent(SignalUpdateReportsEvent.TYPE_SIGNAL_UPDATE_REPORTS, iCalOutput, this.selectDestination.selectedLabel));
			}
		}
		
		private function handleCalendarParms():void {
			var value:String;
			for (var name:String in this.calNode.parms) {
				value = this.calNode.parms[name];
				if (name.toLowerCase() == 'interval') {
					this.selectInterval.value = Number(value);
				} else if (name.toLowerCase() == 'byday') {
					this.selectDay.selectedLabels = value.split("|");
				} else if (name.toLowerCase() == 'bymonthday') {
					this.selectMultipleDays.selectedDates = value.split("|");
					this.radioSelectMultipleDays.selected = true;
				}
			}
		}
		
		private function delayedStateChange(...args):void {
			this.currentState = args[0];
			setDateSelectPrompt();
			setIntervalMetric();
			try { this.selectDay.clearSelections(); } catch (err:Error) { }
			try { this.handleCalendarParms(); } catch (err:Error) { }
		}

		private function onSelectFrequency():void {
			this.callLater(this.delayedStateChange, [this.selectFrequency.selectedLabel]);
		}
		
		private function onSelectReportDestination():void {
	//		AlertPopUp.info(this.selectDestination.selectedLabel, "Debug Info");
		}
		
		private function setIntervalMetric():void{
			var value:String = "";
			switch (selectFrequency.selectedLabel){
				case "One Time":
					break;
				case "Hourly":
					value = "hour(s)";;
					break;
				case "Daily":
					value = "day(s)";
					break;
				case "Weekly":
					value = "week(s) on:";
					break;
				case "Monthly":
					value = "month(s) on the:";
					break;
				default:
					throw new Error("Unable to set Interval metric");
			}

			try { intervalMetric.text = value; } catch (err:Error) { this.delayedChanges.push("intervalMetric.text=" + value); }
		}
		
		private function setDateSelectPrompt():void{
			var value:String = "";
			switch (selectFrequency.selectedLabel){
				case "One Time":
					value = "This Scheduled Report runs on:";
					break;
				case "Hourly":
					value = "This Scheduled Report starts on:";
					break;
				case "Daily":
					value = "This Scheduled Report starts on:";
					break;
				case "Weekly":
					value = "This Scheduled Report starts on:";
					break;
				case "Monthly":
					value = "This Scheduled Report starts on:";
					break;
				default:
					throw new Error("Unable to set DateSelectPrompt");
			}
			try { dateSelectPrompt.text = value; } catch (err:Error) { this.delayedChanges.push("dateSelectPrompt.text=" + value); }
		}
		
		private function setMonthlyMetric(event:ItemClickEvent):void{
			switch (event.item){
				case "selectMultipleDays":
					selectMultipleDays.enabled=true;
					selectOneDay.enabled=false;
					break;
				case "selectOneDay":
					selectMultipleDays.enabled=false;
					selectOneDay.enabled=true;
					break;
				default:
					throw new Error("Unable to set MonthlyMetric");
			}
		}

		private function onCreationCompleteIntervalMetric():void {
			var i:int = 0;
			var s:String;
			var toks:Array;
			while ( (i < this.delayedChanges.length) && (this.delayedChanges.length > 0) ) {
				s = String(this.delayedChanges[i]);
				if (s.indexOf("intervalMetric.text=") > -1) {
					toks = s.split("=");
					if (toks.length == 2) {
						this.intervalMetric.text = toks[toks.length - 1];
					}
					this.delayedChanges.splice(i,1);
					return;
				}
				i++;
			}
		}
		
		private function onCreationCompleteDateSelectPrompt():void {
			var i:int = 0;
			var s:String;
			var toks:Array;
			while ( (i < this.delayedChanges.length) && (this.delayedChanges.length > 0) ) {
				s = String(this.delayedChanges[i]);
				if (s.indexOf("dateSelectPrompt.text=") > -1) {
					toks = s.split("=");
					if (toks.length == 2) {
						this.dateSelectPrompt.text = toks[toks.length - 1];
					}
					this.delayedChanges.splice(i,1);
					return;
				}
				i++;
			}
		}
	]]></mx:Script>
	<mx:HBox>
		<mx:Label text="Report Destination: "/>
		<mx:ComboBox id="selectDestination" toolTip="Choose to Print or Email your reports.  EMailed reports can be directed to any list of email addresses." dataProvider="{this.dataReportDestination}" change="onSelectReportDestination()"/>
	</mx:HBox>
	<mx:HBox>
		<mx:Label text="Report Frequency: "/>
		<mx:ComboBox id="selectFrequency" toolTip="Choose your reporting frequency from this list." dataProvider="[One Time, Hourly, Daily, Weekly, Monthly]" change="onSelectFrequency()"/>
	</mx:HBox>
	<mx:Text id="dateSelectPrompt" creationComplete="onCreationCompleteDateSelectPrompt()"/>
	<dates:SelectableDateChooser id="selectStartDate" styleName="selectStartDate" allowMultipleSelection="false" allowDisjointSelection="false" showToday="false" creationComplete="selectStartDateInit()"/>
	<mx:Label text="Time is based on the Server Time."/>
	<dssgeneral:TimeSelection id="selectStartTime"/>
	<mx:states>
		<mx:State name="One Time"/>
		<mx:State name="Recurence">
			<mx:AddChild relativeTo="{selectStartTime}" position="after">
				<mx:HBox id="selectIntervalBox" width="100%" paddingTop="10">
					<mx:Text text="Every"/>
					<mx:NumericStepper id="selectInterval"  minimum="1" maximum="100"/>
					<mx:Text id="intervalMetric" creationComplete="onCreationCompleteIntervalMetric()"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Hourly" basedOn="Recurence">
			<mx:SetProperty target="{selectInterval}" name="maximum" value="23"/>
		</mx:State>
		<mx:State name="Daily" basedOn="Recurence">
			<mx:SetProperty target="{selectInterval}" name="maximum" value="{DateUtils.numDaysInCurrentMonth()}"/>
		</mx:State>
		<mx:State name="Weekly" basedOn="Recurence">
			<mx:AddChild relativeTo="{selectIntervalBox}" position="after">
				<bfcontrols:MultiSelectButtonBar id="selectDay" dataProvider="[M,T,W,Th,F,Sa,Su]"/>
			</mx:AddChild>
			<mx:SetProperty target="{selectInterval}" name="maximum" value="3"/>
		</mx:State>
		<mx:State name="Monthly" basedOn="Recurence">
			<mx:AddChild relativeTo="{selectIntervalBox}" position="after">
				<mx:VBox>
					<mx:RadioButtonGroup id="selectMonthlyMetric" itemClick="setMonthlyMetric(event)"/>
					<mx:HBox>
						<mx:RadioButton id="radioSelectMultipleDays" value="selectMultipleDays" groupName="selectMonthlyMetric"/>
						<!-- this is a bit of a hack, maybe make our own CalendarSelect later-->
						<bfcontrols:CalendarSelect id="selectMultipleDays" enabled="false" allowMultipleSelection="true"/>
					</mx:HBox>
					<mx:HBox>
						<mx:RadioButton id="radioSelectOneDay" value="selectOneDay" groupName="selectMonthlyMetric"/>
						<mx:HBox id="selectOneDay"  enabled="false" width="100%">
							<mx:ComboBox id="selectMonthlyCount" dataProvider="[First,Second,Third,Fourth,Second to Last,Last]"/>
							<mx:ComboBox id="selectMonthlyDay" dataProvider="[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]"/>
						</mx:HBox>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
			<mx:SetProperty target="{selectInterval}" name="maximum" value="11"/>
		</mx:State>
	</mx:states>
	<mx:Spacer height="10"/>
	<mx:Button id="btn_commitSchedule" label="Commit Schedule" styleName="btnCommitSchedule" labelPlacement="left" toolTip="Click this button to commit this schedule to the database." click="applyClick()"/>
</mx:VBox>
