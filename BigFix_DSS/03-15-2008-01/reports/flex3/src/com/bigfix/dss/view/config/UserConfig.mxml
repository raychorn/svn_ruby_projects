<?xml version="1.0" encoding="utf-8"?>

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
         xmlns:bfcontrols="com.bigfix.extensions.controls.*"
         width="100%" height="100%"
         paddingLeft="5" paddingRight="5"
         creationComplete="onCreationComplete()">
  <mx:Script>
  	<![CDATA[
  	  import mx.collections.ArrayCollection;
  	  import mx.binding.utils.BindingUtils;
      import mx.events.ItemClickEvent;
  		import com.bigfix.dss.model.DSSModelLocator;
  		import com.bigfix.dss.util.DSS;
  		import com.bigfix.dss.event.EditorEvent;
  		import com.bigfix.dss.view.general.SaveConfirm;
  		import com.bigfix.dss.vo.UserVO;
  		import com.bigfix.dss.vo.RoleVO;
  		
  		[Bindable]
  		private var model:DSSModelLocator = DSS.model;
  		
  		[Bindable]
  		private var editedUser:UserVO;
  		
  		[Bindable]
  		private var availableRoles:ArrayCollection;
  		[Bindable]
  		private var selectedRoles:ArrayCollection;
  		
  		private var userRoleIDs:Array;
  		
  		private var nextAction:Function;
  		
  		private var password_dirty:Boolean;
  		
  		private var saveConfirmDialog:SaveConfirm;
  		
  		private function onCreationComplete():void {
  		  new EditorEvent(EditorEvent.EDITOR_LIST, 'User').dispatch();
  		  new EditorEvent(EditorEvent.EDITOR_LIST, 'Role').dispatch();
  		  BindingUtils.bindSetter(modelRolesChanged, DSS.model, "roles");
  		  deleteButton.enabled = false;
  		  
  		  saveConfirmDialog = new SaveConfirm();
  		  saveConfirmDialog.addEventListener('save', function(event:*):void { applyChanges(nextAction); });
  		  saveConfirmDialog.addEventListener('dontsave', function(event:*):void { revertChanges(); nextAction(); });
  		}
  		
  		private function updateRoleLists():void {
  		  if (editedUser == null || userRoleIDs == null)
  		    return;
  		  
  		  availableRoles = new ArrayCollection();
  		  selectedRoles = new ArrayCollection();
  		  
  		  for each (var role:RoleVO in DSS.model.roles) {
  		    if (userRoleIDs[role.id])
  		      selectedRoles.addItem(role);
  		    else
  		      availableRoles.addItem(role);
  		  }
  		}
  		
  		private function gotUserRoles(event:*):void {
  		  userRoleIDs = new Array();
  		  
  		  for each (var roleID:int in event.result) {
  		    userRoleIDs[roleID] = true;
  		  }
  		  updateRoleLists();
  		}
  		
  		private function modelRolesChanged(roles:*):void {
  		  updateRoleLists();
  		}
  		
  		private function changesPending():Boolean {
  		  return applyButton.enabled;
  		}
  		
  		private function changeSelection(newSelection:UserVO):void {
  		  if (newSelection != null && newSelection.busy)
  		    newSelection = null;
  		  
  		  if (userList.selectedItem != newSelection) {
	        userList.selectedItem =
	          (newSelection != null && newSelection.id != 0 ? newSelection : null);
  		  }
  		  
  		  if (editedUser != newSelection) {
  		    passwordInput.text = '******';
  		    password_dirty = false;
  		    editedUser = newSelection;
  		    availableRoles = new ArrayCollection();
  		    selectedRoles = new ArrayCollection();

  		    // Enable the apply button iff we have an unsaved User selected.
  		    applyButton.enabled = (editedUser != null && editedUser.id == 0);
  		    
  		    // Reset the form.
          nameInput.horizontalScrollPosition = 0;
          
          // Load the user's roles.
          if (editedUser == null)
            ;
          else if (editedUser.id == 0) {
            userRoleIDs = new Array();
            updateRoleLists();
          }
          else {
            DSS.svc('EditorService').get_property({ 'class': 'User',
                                                    'id': editedUser.id,
                                                    'property': 'role_ids'
                                                   }).onResult(gotUserRoles);
          }
		    }
  		  
  		  // Enable the delete button iff we have any selected users.
  		  deleteButton.enabled = (userList.selectedItems.length != 0);
  		  
        // Enable the form iff we have a selected user.
  		  form.enabled = (editedUser != null);
  		  
  		  // Change the text of the apply button as appropriate.
  		  applyButton.label = (editedUser != null && editedUser.id == 0 ? 'Create' : 'Apply');
  		}
  		
  		private function selectionChanged():void {
  		  var newSelection:UserVO;
  		  
  		  if (userList.selectedItems.length != 1)
  		    newSelection = null;
  		  else
  		    newSelection = userList.selectedItem as UserVO;

  		  // Stop the user from throwing away changes.  Instead, show a confirmation
  		  // dialog and revert the selection state.
	      if (changesPending()) {
	        saveConfirm(function():void { changeSelection(newSelection); });
	        userList.selectedItem = editedUser;
	        return;
	      }
        
        changeSelection(newSelection);
  		}
  		
  		private function formDataChanged():void {
  		  if (editedUser != null)
  		    applyButton.enabled = true;
  		}
  		
  		private function revertChanges():void {
  		  changeSelection(null);
  		}
  		
  		private function passwordChanged():void {
  		  password_dirty = true;
  		  formDataChanged();
  		}
  		
  		private function applyChanges(nextAction:Function=null):void {
  		  var extra:* = new Object();

  		  editedUser.name = nameInput.text;
  		  editedUser.username = usernameInput.text;
  		  editedUser.email = emailInput.text;
  		  if (password_dirty) {
  		    extra['password'] = passwordInput.text;
  		    extra['password_confirmation'] = passwordInput.text;
		    }

        extra['role_ids'] = selectedRoles.source.map(function (role:RoleVO, idx:int, ary:Array):int { return role.id });
  		  
        // Deactivate the apply button, which also has the effect of noting that
        // no changes are pending.
  		  applyButton.enabled = false;
  		  
  		  var editEvent:EditorEvent;

  		  // Mark the user "busy", so it can't be edited while we're saving it.
  		  editedUser.busy = true;

  		  if (editedUser.id == 0)
  		    editEvent = new EditorEvent(EditorEvent.EDITOR_CREATE, 'User', editedUser, extra);
  		  else
  		    editEvent = new EditorEvent(EditorEvent.EDITOR_UPDATE, 'User', editedUser, extra);
  		  
  		  if (nextAction != null) {
  		    editEvent.followup = function(user:UserVO):void { updateComplete(user); nextAction(); }
  		  }
  		  else
  		    editEvent.followup = this.updateComplete;
  		  
  		  editEvent.dispatch();
  		  changeSelection(null);
  		}
  		
  		private function updateComplete(user:UserVO):void {
  		  if (userList.selectedItems.length == 0) {
  		    changeSelection(user);
  		    nameInput.setFocus();
		    }
  		}
  		
  		private function deleteUsers():void {
  		  if (userList.selectedItems.length == 0)
  		    return;
  		  
  		  var deleteEvent:EditorEvent;
  		  var userIDs:Array;

  		  // Mark the users "busy" so they can't be changed while we're deleting them.
  		  userList.selectedItems.forEach(function (user:UserVO, index:int, array:Array):void { user.busy = true; });

  		  userIDs = userList.selectedItems.map(function (user:UserVO, index:int, array:Array):int { return user.id; });
  		  deleteEvent = new EditorEvent(EditorEvent.EDITOR_DELETE, 'User', userIDs);
  		  deleteEvent.dispatch();

        // We have to do this last, because this will change selectedItems.
  		  if (editedUser != null &&
  		      userList.selectedItems.indexOf(editedUser) != -1) {
  		    revertChanges();
  		  }
    	}
  		
  		private function createUser():void {
  		  if (changesPending()) {
	        saveConfirm(function():void { createUser(); });
	        return;
	      }
	      
  		  var r:UserVO = new UserVO();
  		  
  		  r.name = 'New User';
  		  changeSelection(r);
  		  nameInput.setFocus();
  		  nameInput.setSelection(0, nameInput.text.length);
  		  formDataChanged(); // Activate the Create/Revert buttons
  		}
  		
  		private function saveConfirm(nextAction:Function):void {
				this.nextAction = nextAction;
				saveConfirmDialog.show(this);
			}

			private function get addButton():Button
      {
        return addDeleteButtons.getChildAt(0) as Button;
      }
      
      private function get deleteButton():Button
      {
        return addDeleteButtons.getChildAt(1) as Button;
      }
      
      private function buttonClicked(event:ItemClickEvent):void
      {
        switch (event.item.name) {
          case 'add':
            createUser();
            break;
          case 'delete':
            deleteUsers();
            break;
        }
      }
  	]]>
  </mx:Script>

  <mx:HBox>
    <mx:VBox width="400" height="500">
      <mx:List id="userList" width="100%" height="100%"
               dataProvider="{model.users}" labelField="name"
               allowMultipleSelection="true"
               change="selectionChanged()" />
      <mx:ButtonBar id="addDeleteButtons" toolTipField="toolTip" labelField="label" itemClick="buttonClicked(event)">
        <mx:dataProvider>
          <mx:Array>
            <mx:Object label="+" toolTip="Add a new user" name="add"/>
            <mx:Object label="-" toolTip="Delete selected user(s)" name="delete"/>
          </mx:Array>
        </mx:dataProvider>
      </mx:ButtonBar>
    </mx:VBox>
    <mx:Canvas id="form" enabled="false" width="400" height="500" borderStyle="solid"
               defaultButton="{applyButton}"
               keyDown="if (event.keyCode == Keyboard.ESCAPE) revertChanges();">
      <mx:Grid top="10" left="10">
        <mx:GridRow>
          <mx:GridItem>
            <mx:Label text="Name:" />
          </mx:GridItem>
          <mx:GridItem>
            <mx:TextInput id="nameInput" text="{editedUser.name}" change="formDataChanged()" />
          </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow>
          <mx:GridItem>
            <mx:Label text="Username:" />
          </mx:GridItem>
          <mx:GridItem>
            <mx:TextInput id="usernameInput" text="{editedUser.username}" change="formDataChanged()" />
          </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow>
          <mx:GridItem>
            <mx:Label text="Email:" />
          </mx:GridItem>
          <mx:GridItem>
            <mx:TextInput id="emailInput" text="{editedUser.email}" change="formDataChanged()" />
          </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow>
          <mx:GridItem>
            <mx:Label text="Password:" />
          </mx:GridItem>
          <mx:GridItem>
            <mx:TextInput id="passwordInput" displayAsPassword="true" text="******" change="passwordChanged()" />
          </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow>
        	<mx:GridItem colSpan="2">
        		<bfcontrols:DoubleList leftListDataProvider="{availableRoles}" rightListDataProvider="{selectedRoles}" labelField="name" change="formDataChanged()" />
        	</mx:GridItem>
        </mx:GridRow>
      </mx:Grid>
      <mx:HBox left="10" bottom="10">
        <mx:Button id="applyButton" label="Apply" enabled="false" click="applyChanges()" />
        <mx:Button id="revertButton" label="Revert" enabled="{applyButton.enabled}" click="revertChanges()" />
      </mx:HBox>
    </mx:Canvas>
  </mx:HBox>
</mx:HBox>
