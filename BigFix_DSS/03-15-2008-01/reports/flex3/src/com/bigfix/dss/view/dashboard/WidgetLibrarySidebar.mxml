<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:dashboard="com.bigfix.dss.view.dashboard.*"
	xmlns:flexlib="flexlib.controls.*"
	xmlns:editors="com.bigfix.dss.view.editors.*"
	width="200" height="100%" maxWidth="200" minWidth="200" styleName="WidgetLibrarySidebar"
	creationComplete="init()" 
	>
	<mx:Script><![CDATA[
		import com.bigfix.dss.view.editors.events.PerformSearchEvent;
		import com.bigfix.dss.view.editors.events.TextChangedEvent;
		import flash.events.MouseEvent;
		import mx.managers.DragManager;
		import mx.core.DragSource;
		import mx.events.DragEvent;
		import mx.collections.ArrayCollection;

		import com.bigfix.dss.model.DSSModelLocator;
		import com.bigfix.dss.event.CreatePopUpEvent;
		import com.bigfix.dss.view.dashboard.WidgetCreation;
		import com.bigfix.dss.command.GetWidgetsCommand;
		import com.bigfix.dss.vo.WidgetVO;
		
		include 'WidgetLibraryLib.as';
		
		[Bindable]
		private var model:DSSModelLocator = DSSModelLocator.getInstance();

		[Bindable]
		private var watcherManager:WatcherManager = new WatcherManager();
		
		private function init():void {
			new GetWidgetsCommand().execute(null);
			watcherManager.manage(BindingUtils.bindProperty(searchText, 'text', model, 'currentSearchText'));
			watcherManager.manage(BindingUtils.bindProperty(model, 'currentSearchText', searchText, 'text'));
		}
		
		private function attachDragListeners(event:Event):void {
			event.currentTarget.addEventListener(MouseEvent.MOUSE_DOWN, startWidgetTemplateDrag);
		}

		private function startWidgetTemplateDrag(event:MouseEvent):void {
  			var ds:DragSource = new DragSource();
  			ds.addData(event.currentTarget.widgetData, 'WidgetTemplate');
  			DragManager.doDrag(WidgetTemplate(event.currentTarget), ds, event);
		}
		private function manageWidgets():void {
			model.dashboardViewState = 'ManageWidgets';
		}

		private function onPerformSearch(event:PerformSearchEvent):void {
			filterWidgets(this.searchText.text, this.model);
		}
		
		private function onTextChangedPromptingTextInputCanvas(event:TextChangedEvent):void {
			filterWidgets(this.searchText.text, this.model);
		}
		
		private function onCreationCompletePromptingTextInputCanvas():void {
			this.searchText.addEventListener(TextChangedEvent.TYPE_TEXT_CHANGED, onTextChangedPromptingTextInputCanvas);
			this.searchText.addEventListener(PerformSearchEvent.TYPE_PERFORM_SEARCH, onPerformSearch);
		}
		
		private function onClickCreateWidgetButton():void {
			createWidget(this.model);
		}
	]]></mx:Script>
	<mx:Panel styleName="infoPanel" headerHeight="0" width="100%" textAlign="center" horizontalAlign="center" verticalAlign="middle">
		<mx:Text selectable="false">
<mx:text>
<![CDATA[Add Widgets by
dragging them into
your dashboard
or you can
]]></mx:text>
		</mx:Text>
		<mx:Button id="btnCreateWidget" label="Create a Widget" styleName="btnCreateWidget" icon="@Embed(source='/assets/add-script_32x32.gif')" labelPlacement="left" toolTip="Click this button to create a Widget in your widget library." click="onClickCreateWidgetButton()"/>
		<mx:Button id="btnManageWidgets" label="Manage Widgets" styleName="btnManageWidgets" icon="@Embed(source='/assets/documents_32x32.gif')" labelPlacement="left" toolTip="Click this button to manage your widget library." click="manageWidgets()"/>
		<editors:PromptingTextInputCanvas id="searchText" prompt="Search" textAlign="left" creationComplete="onCreationCompletePromptingTextInputCanvas()"/>
	</mx:Panel>
	<mx:VBox width="100%" height="100%" minHeight="0" horizontalAlign="center">
		<mx:Repeater id="widgetRepeater" dataProvider="{model.widgets}">
			<dashboard:WidgetTemplate creationComplete="attachDragListeners(event)" widgetData="{widgetRepeater.currentItem}"/>
		</mx:Repeater>
	</mx:VBox>
</mx:VBox>
