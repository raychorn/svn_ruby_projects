<?xml version="1.0" encoding="utf-8"?>
<mx:Box 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:report="com.bigfix.dss.view.report.*"
	xmlns:busy="com.bigfix.dss.view.general.Busy.*"
	xmlns:palette="com.bigfix.dss.view.general.palette.*"
	xmlns:widgets="com.bigfix.dss.view.ReportManager.widgets.*"
	xmlns:canvas="com.bigfix.dss.view.graphics.canvas.*"
	width="100%" height="100%" 
	creationComplete="init()" 
	>
	<mx:Script><![CDATA[
		import com.bigfix.dss.view.fileio.view.PopUpProgressBar;
		import com.bigfix.dss.event.FileDownloadCompleteEvent;
		import com.bigfix.dss.view.fileio.FileDownload;
		import com.bigfix.dss.util.URLUtils;
		import com.bigfix.dss.util.BitmapUtils;
		import com.bigfix.dss.view.ReportManager.widgets.events.BeginSaveAsEvent;
		import com.bigfix.dss.view.ReportManager.widgets.events.BeginPrintJobEvent;
		import mx.events.DataGridEvent;
		import com.bigfix.dss.vo.WidgetVO;
		import com.bigfix.dss.command.GetWidgetsCommand;
		import com.bigfix.dss.view.dashboard.WidgetInstance;
		import com.bigfix.dss.view.graphics.sprites.TextSprite;
		import com.bigfix.dss.util.ArrayUtils;
		import com.bigfix.dss.util.ArrayCollectionUtils;
		import mx.controls.TextInput;
		import mx.events.FlexEvent;
		import mx.events.CollectionEvent;
		import mx.rpc.remoting.mxml.RemoteObject;
		import com.bigfix.dss.command.GetReportsCommand;
		import com.bigfix.dss.util.ServiceProxy;
		import mx.rpc.remoting.mxml.RemoteObject;
		import com.adobe.cairngorm.business.ServiceLocator;
		import com.bigfix.dss.util.DSS;
		import com.bigfix.dss.vo.ReportVO;
		import com.bigfix.dss.vo.ReportBuilderVO;
		import com.bigfix.dss.view.general.PopUpTextPrompt;
		import com.bigfix.dss.view.editors.ReportBuilderNameLabel;
		import com.bigfix.dss.view.graphics.sprites.events.MovedSpriteEvent;
		import com.bigfix.dss.util.ArrayUtils;
		import com.bigfix.dss.view.report.events.SignalCurrentReportEvent;
		import mx.core.IFlexDisplayObject;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;
		import mx.printing.FlexPrintJobScaleType;
		import mx.printing.FlexPrintJob;
		import mx.events.ListEvent;
		import mx.collections.ArrayCollection;
		import com.bigfix.dss.view.ReportManager.canvas.WidgetCanvas;
		import com.bigfix.dss.view.general.widgets.ImageWidget;
		import com.bigfix.dss.view.graphics.sprites.GeometricSprite;
		import com.bigfix.dss.view.general.widgets.WidgetWrapper;
		import com.bigfix.dss.view.graphics.canvas.events.AddElementToReportCompletedEvent;
		import com.bigfix.dss.view.graphics.canvas.events.SelectedReportElementEvent;
		import com.bigfix.dss.view.graphics.canvas.events.AddElementToReportEvent;
		import com.bigfix.dss.view.general.Alert.AlertPopUp;
		import com.bigfix.dss.vo.WebOrbResultVO;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import com.bigfix.dss.view.fileio.events.FileUploadCompletedEvent;
		import com.bigfix.dss.view.graphics.canvas.events.InitializeReportBuilderButtonsEvent;
		import com.bigfix.dss.weborb.RemoteWebOrbObject;
		import com.bigfix.dss.view.general.widgets.events.RemovedImageElementEvent;
		import com.bigfix.dss.view.general.palette.events.ChangeReportModeEvent;
		import com.bigfix.dss.event.GetReportsEvent;
		import com.bigfix.dss.model.DSSModelLocator;
		
		[Bindable]
		private var model:DSSModelLocator = DSSModelLocator.getInstance();

		private var _weborbObj:RemoteWebOrbObject;
			
		private var _timer:Timer;
		
		private var _reportNamePopUp:PopUpTextPrompt;
		
		private var _reportName:String = "";
		
		private var _clickedNewReport:Boolean = false;
		private var _clickedEditReport:Boolean = false;
		
		private var _imageQueue:Array = [];
			
		private var _fDown:FileDownload;

		private var _selectionOptions:Array = [ 
												{label: "Click Normal", data: ReportBuilderCanvas.const_CLICK_NORMAL_OPTION},
												{label: "Click Forward", data: ReportBuilderCanvas.const_CLICK_FORWARD_OPTION}
											   ];

		[Event(name="signalCurrentReport", type="com.bigfix.dss.view.report.events.SignalCurrentReportEvent")]

		private function onDataFromGetReportsEvent():void {
			this.refreshReportsButtons();
		}
		
		private function init():void {
			new GetReportsEvent(onDataFromGetReportsEvent).dispatch();
			currentState="Main";
		}

		private function epochToDate(item:Object, column:DataGridColumn):String {
			var datum:* = item[column.dataField];
			if (datum == null) {
				return "UNDEFINED";
			} else {
				return String(new Date(Number(datum)));
			}
		}
		
		private function refreshReportsButtons():void {
			if (this._clickedNewReport == false) {
				this.btn_newReportBuilder.visible = ( (this.reportsGrid.selectedItems.length == 0) || (this.viewstack.selectedIndex == 0) );
				this.btn_openReportBuilder.visible = (this.reportsGrid.selectedItems.length > 0);
			} else {
				this.btn_newReportBuilder.visible = ( (this.reportsGrid.selectedItems.length > 0) && (this.viewstack.selectedIndex == 0) );
				this.btn_openReportBuilder.visible = ( (this.reportsGrid.selectedItems.length == 0) || (this.viewstack.selectedIndex > 0) );
			}
			this.btn_openReportBuilder.label = (((this.reportsGrid.selectedItems.length == 0) || (this.viewstack.selectedIndex == 1)) ? "Close Report Builder" : "Edit Report");
			this.btn_deleteReports.enabled = ( (this.reportsGrid.selectedItems.length > 0) && (this.viewstack.selectedIndex == 0) );
			this.btn_setSchedule.enabled = ( (this.reportsGrid.selectedItems.length > 0) && (this.viewstack.selectedIndex == 0) );
		}
		
		private function relabelOpenReportBuilderButton():void {
			if (this.viewstack.selectedIndex == 0) {
				if (this.reportsGrid.selectedItems.length == 1) {
					this.btn_openReportBuilder.label = "Edit Report";
					this.btn_newReportBuilder.visible = true;
				} else {
					this.btn_newReportBuilder.visible = false;
					this.btn_openReportBuilder.label = "New Report";
				}
			} else {
				this.btn_newReportBuilder.visible = false;
				this.btn_openReportBuilder.label = "Close Report Builder";
			}
		}

		private function refreshOpenReportBuilderButton(forceSaveButtonFace:Boolean = false):void {
			if (this._clickedEditReport == false) {
				var bool:Boolean = ( ( (this.btn_openReportBuilder.label.indexOf("Close ") > -1) || (this.btn_openReportBuilder.label.indexOf("Save ") > -1) ) && (ReportBuilderCanvas.elementArray.length > 0) );
				if ( (bool) || (forceSaveButtonFace) ) {
					this.btn_openReportBuilder.label = "Save Current Report";
					this.dispatchEvent(new SignalCurrentReportEvent(SignalCurrentReportEvent.TYPE_SIGNAL_CURRENT_REPORT, false));
				} else {
					this.relabelOpenReportBuilderButton();
				}
			}
		}

		private function processOpenReportBuilderButtonClick():void {
			this.viewstack.selectedIndex = (((this.btn_openReportBuilder.label.indexOf("Close ") > -1) && (this.btn_openReportBuilder.visible == true)) ? 0 : 1);
			this.btn_openReportBuilder.label = this.btn_openReportBuilder.label.replace(((this.btn_openReportBuilder.label.indexOf("Close ") > -1) ? "Close " : "Open "), ((this.btn_openReportBuilder.label.indexOf("Close ") > -1) ? "Open " : "Close "));
			this.hbox_reportBuilderOptions.visible = ((this.viewstack.selectedIndex == 0) ? false : true);
			var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
			if (this.viewstack.selectedIndex == 0) {
				this.refreshReportsButtons();
			} else if (this._clickedNewReport == true) {
				this.refreshReportsButtons();
				dc.init();
			} else { // edit an existing report here...
				var reportVO:ReportVO = ReportVO(this.reportsGrid.selectedItem);
				this.refreshReportsButtons();
				if (reportVO != null) {
					dc.init();
					dc.populateFrom(reportVO);
				}
			}
		}
		
		private function onKeyUpTextPromptTextField(event:KeyboardEvent):void {
			var textField:TextInput = TextInput(event.currentTarget);
			var name:String = textField.text;
			
			if (model.reports != null) {
				var i:int = ArrayCollectionUtils.findIndexOfItem(model.reports, "name", name);
				this._reportNamePopUp.TextField.errorString = ((i > -1) ? "The Report Name must be unique." : "");
				this._reportNamePopUp.refreshOkButtonState();
			}
		}
		
		private function onCreationCompletePopUpTextPrompt(event:FlexEvent):void {
			this._reportNamePopUp = PopUpTextPrompt(event.currentTarget);
			this._reportNamePopUp.TextField.addEventListener(KeyboardEvent.KEY_UP, onKeyUpTextPromptTextField);
		}
		
		private function onCancelReportEditConfirmation(event:CloseEvent):void {
			if (event.detail == 1) {
				var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
				dc.init();
				this.viewstack.selectedIndex = 0;
				this._clickedNewReport = false;
				this.hbox_reportBuilderOptions.visible = ((this.viewstack.selectedIndex == 0) ? false : true);
				this.refreshReportsButtons();
			}
		}
		
		private function onCancelPopUpTextPrompt(popUp:PopUpTextPrompt):void {
			if (popUp.hasBeenEdited) {
				AlertPopUp.confirm("Do you want to stop editing this Report and go back to the Reports List ?", "Confirmation", onCancelReportEditConfirmation);
			}
		}
		
		private function getReportName():void {
			var popUp:PopUpTextPrompt = new PopUpTextPrompt;
			popUp.prompt = "Enter Report Name:";
			popUp.text = ((_reportName.length == 0) ? "Untitled" : _reportName);
			popUp.okHandler = function (newName:String):void {
				_weborbObj = new RemoteWebOrbObject("ReportWriter", "saveReport", busy, onResultWebOrb, onFaultWebOrb);
				var svc:RemoteObject = GetReportsCommand.svc.svc;
				_weborbObj.endpoint = svc.channelSet.currentChannel.endpoint;
				_weborbObj.doWebOrbServiceCall(newName,model.user.id,ArrayUtils.serializeAllForRuby(ReportBuilderCanvas.elementArray));

				dispatchEvent(new SignalCurrentReportEvent(SignalCurrentReportEvent.TYPE_SIGNAL_CURRENT_REPORT, true));
				relabelOpenReportBuilderButton();
			}
			popUp.cancelHandler = onCancelPopUpTextPrompt;
			PopUpManager.addPopUp(popUp, this, false);
			popUp.x = this.width - 300;
			popUp.y = 120;
			popUp.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletePopUpTextPrompt);
		}

		private function onClickNewReport():void {
			if (this.viewstack.selectedIndex == 0) {
				this._clickedNewReport = true;
				this._clickedEditReport = false;
			}
			this.processOpenReportBuilderButtonClick();
		}
		
		private function onClickOpenReportBuilder():void {
			if ( (this.viewstack.selectedIndex == 0) || (this.btn_openReportBuilder.label.indexOf("Close ") > -1) ) {
				this._clickedNewReport = false;
			}
			if ( (this.viewstack.selectedIndex == 0) || (this.btn_openReportBuilder.label.indexOf("Edit ") > -1) ) {
				this._clickedEditReport = true;
			}
			var bool:Boolean = ( (this.btn_openReportBuilder.label.indexOf("Save ") > -1) && (ReportBuilderCanvas.elementArray.length > 0) );
			if (bool) {
				this.getReportName();
			} else {
				this.processOpenReportBuilderButtonClick();
			}
		}

		private function currentReportBuilderCanvas():ReportBuilderCanvas {
        	return this.reportBuilderCanvas;
		}
			
		private function onChangeReportMode(event:ChangeReportModeEvent):void {
			var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
			switch (event.elementType) {
				case ReportBuilderCanvas.const_SELECT_ELEMENTS:
					dc.clearMode();
				break;

				case ReportBuilderCanvas.const_TEXT_REPORT_ELEMENT:
					dc.setTextMode();
				break;

				case ReportBuilderCanvas.const_LIST_ELEMENTS:
					dc.setListMode();
				break;
				
				case ReportBuilderCanvas.const_IMAGE_ELEMENTS:
					dc.setImageMode();
				break;
			}
		}
			
		private function onCreationCompleteIconCanvas():void {
			this.iconCanvas.initializeButtons();
			this.iconCanvas.addEventListener(ChangeReportModeEvent.TYPE_CHANGE_REPORT_MODE, onChangeReportMode);
		}
			
        private function onDownloadComplete(event:Event):void {
			this.currentState = 'Main';
        }
        
		private function onClickCancelDownloadButton():void {
			this.currentState = 'Main';
			this._fDown.cancelDownload();
		}

        private function onFileDownloadComplete(event:FileDownloadCompleteEvent):void {
			this.currentState = 'Main';
        }

		private function popUpProgressBar():PopUpProgressBar {
			var popUp:PopUpProgressBar = new PopUpProgressBar();
			PopUpManager.addPopUp(popUp, this, false);
			popUp.x = this.btn_PrintJob.x + (this.btn_PrintJob.width / 2);
			popUp.y = 120;
	//		popUp.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletePopUpTextPrompt);
			return popUp;
		}

		private function onResultWebOrb(event:ResultEvent, _vo:*):void {
			if (_vo != null) {
				var vo:WebOrbResultVO = WebOrbResultVO(_vo);
				if ( (vo.info == "ReportWriter::deleteReport") || (vo.info == "ReportWriter::saveReport") || (vo.info == "ReportWriter::renameReport") ) {
					new GetReportsEvent(onDataFromGetReportsEvent).dispatch();
				} else if (vo.info == "ReportWriter::checkReportName") {
					this._reportNamePopUp.TextField.errorString = ((vo.status == 1) ? "The Report Name must be unique." : "");
					this._reportNamePopUp.refreshOkButtonState();
				} else if (vo.info.indexOf("ReportWriter::saveImage") > -1) {
					var ar:Array = vo.info.split("|");
					var serverFileName:String = ar[ar.length - 1];
					var urlDomain:String = URLUtils.domain(this.parentApplication.url);
					var url:String = URLUtils.getURLFrom(serverFileName, urlDomain);

					var popUp:PopUpProgressBar = this.popUpProgressBar();
	//				this.currentState = 'DownloadState';
					this._fDown = new FileDownload();
					this._fDown.init(popUp.progressBar, popUp.btn_cancelDownload);
					this._fDown.fileReference.addEventListener(Event.COMPLETE, onDownloadComplete);
					this._fDown.addEventListener(FileDownloadCompleteEvent.FILE_DOWNLOAD_COMPLETE, onFileDownloadComplete);
					this._fDown.startDownload(url);
				}
			}
		}
		
		private function onFaultWebOrb(event:FaultEvent):void {
			this.refreshReportsButtons();
			AlertPopUp.error(event.fault.toString(),"WebOrb Fault");
		}
			
		private function onRemovedImageElement(event:RemovedImageElementEvent):void {
			if (event.url.length > 0) {
				var ar:Array = event.url.split("/");
				var first:String;
				ar.splice(0,1);
				while (ar.length > 0) {
					first = ar[0];
					if (first.indexOf(":") > -1) {
						ar.splice(0,1);
						break;
					}
					ar.splice(0,1);
				}
				this._weborbObj = new RemoteWebOrbObject("ReportWriter", "deleteImage", this.busy, onResultWebOrb, onFaultWebOrb);
				var svc:RemoteObject = GetReportsCommand.svc.svc;
				this._weborbObj.endpoint = svc.channelSet.currentChannel.endpoint;
				this._weborbObj.doWebOrbServiceCall(ar.join("/"));
			}
		}
			
		private function onInitializeReportBuilderButtons(event:InitializeReportBuilderButtonsEvent):void {
			this.iconCanvas.initializeButtons();
		}

		private function selectOptionFrom(cmbo:ComboBox):void {
			if (cmbo != null) {
				var item:* = cmbo.selectedItem;
				var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
				if (dc != null) {
					dc.selectOption = item.data;
				}
			}
		}
			
		private function onChangeSelectOptionsComboBox(event:ListEvent):void {
			this.selectOptionFrom(ComboBox(event.currentTarget));
		}
			
		private function getNumElements():Number {
			return ReportBuilderCanvas.elementArray.length;
		}

		private function refreshPrintJobButton():void {
			this.btn_PrintJob.enabled = (this.getNumElements() > 0);
		}
			
		private function onFileUploadCompleted(event:FileUploadCompletedEvent):void {
			this.refreshPrintJobButton();
		}
		
		private function onCreationCompleteImageWidget(event:FlexEvent):void {
			var image:ImageWidget = ImageWidget(event.currentTarget);
			if (this._imageQueue.length > 0) {
				var source:String = ArrayUtils.popFromFront(this._imageQueue);
				image.image.source = source;
				image.removeEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompleteImageWidget);
			}
		}
		
		private function onCreationCompleteWidgetInstance(event:FlexEvent):void {
			var w:Number = -1;
			var h:Number = -1;
			try {
				w = event.currentTarget["width"];
				h = event.currentTarget["height"];
			} catch (err:Error) { }
			if ( (w > -1) && (h > -1) ) {
				if (this.width < w) {
					this.width = 300;
					this.parent.width = this.width;
				}
				if (this.height < h) {
					this.height = 150;
					this.parent.height = this.height;
				}
			}
		}
		
		private function onResultGetWidgetsCommand(... args):void {
			if (args != null) {
				var argsAR:Array = args as Array;
				if (argsAR.length > 0) {
					var widget:WidgetWrapper = WidgetWrapper(argsAR[0][0]);
					var vo:ReportBuilderVO = ReportBuilderVO(widget.vo);
					if (model.widgets != null) {
						var i:int = ArrayCollectionUtils.findIndexOfItem(model.widgets, "id", vo.widgetID.toString());
						
						if (i > -1) {
							var widgetData:WidgetVO = WidgetVO(model.widgets.getItemAt(i));
							
							var newWidgetInstance:WidgetInstance = new WidgetInstance();
							newWidgetInstance.name = vo.widgetName;
							newWidgetInstance.widgetData = widgetData;
							newWidgetInstance.removeHeaderElements();
							newWidgetInstance.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompleteWidgetInstance);
							widget.addChild(newWidgetInstance);
						}
					}
				}
			}

		}
		
		private function onCreationCompleteListWidget(event:FlexEvent):void {
			var widget:WidgetWrapper = WidgetWrapper(event.currentTarget);
			new GetWidgetsCommand()._execute(null, onResultGetWidgetsCommand, widget);
			widget.removeEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompleteListWidget);
		}

		private function onAddElementToReport(event:AddElementToReportEvent):void {
			var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
			var vo:ReportBuilderVO = ReportBuilderVO(event.data);
			var sprite:GeometricSprite;
			switch (event.elementType) {
				case ReportBuilderCanvas.const_TEXT_REPORT_ELEMENT:
					sprite = dc.addShape(event.elementType, 0);
					sprite.id = "GeometricSprite_" + GeometricSprite.count;
					sprite.x = event.x;
					sprite.y = event.y;
					try { sprite["myWidth"] = event.width; } catch (err:Error) { sprite.width = event.width; }
					try { sprite["myHeight"] = event.height; } catch (err:Error) { sprite.height = event.height; }
					if ( (vo != null) && (vo.text != null) && (vo.text.length > 0) ) {
						TextSprite(sprite).htmlText = vo.text;
					}
					sprite.drawShape();
					sprite.refreshResizeShape();
				break;

				case ReportBuilderCanvas.const_IMAGE_ELEMENTS:
				case ReportBuilderCanvas.const_LIST_ELEMENTS:
				case ReportBuilderCanvas.const_WIDGET_ELEMENTS:	// this happens when reading elements from the database...
					if ( (event.elementType == ReportBuilderCanvas.const_WIDGET_ELEMENTS) && (vo != null) ) {
						if ( (vo.source != null) && (vo.source.length > 0) ) {
							event.elementType = ReportBuilderCanvas.const_IMAGE_ELEMENTS;	// map the saved widget type back to an editable widget type...
						} else if ( (vo.widgetID > 0) && (vo.widgetName != null) && (vo.widgetName.length > 0) ) {
							event.elementType = ReportBuilderCanvas.const_LIST_ELEMENTS;	// map the saved widget type back to an editable widget type...
						}
					}
					var canvas:WidgetCanvas = new WidgetCanvas();
					canvas.id = "WidgetCanvas_" + WidgetCanvas.count;
					canvas.x = event.x;
					canvas.y = event.y;
					canvas.width = event.width;
					canvas.height = event.height;

					switch (event.elementType) {
						case ReportBuilderCanvas.const_LIST_ELEMENTS:
							var list:WidgetWrapper = new WidgetWrapper();
							list.id = "ListWidget_" + WidgetWrapper.count;
							list.x = 0;
							list.y = 0;
							list.width = canvas.width;
							list.height = canvas.height;
							if ( (vo != null) && (vo.widgetID > 0) && (vo.widgetName != null) && (vo.widgetName.length > 0) ) {
								list.vo = vo;
								list.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompleteListWidget);
							}
							canvas.addChild(list);
						break;

						case ReportBuilderCanvas.const_IMAGE_ELEMENTS:
							var image:ImageWidget = new ImageWidget();
							image.id = "ImageWidget_" + ImageWidget.count;
							image.x = 0;
							image.y = 0;
							image.width = canvas.width;
							image.height = canvas.height;
							if ( (vo != null) && (vo.source != null) && (vo.source.length > 0) ) {
								this._imageQueue.push(vo.source);
								image.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompleteImageWidget);
							}
							canvas.addChild(image);
						break;
					}
					dc.addWidget(canvas);
				break;
			}
			this.refreshOpenReportBuilderButton();
			this.refreshPrintJobButton();
		}

		private function onSelectedReportElement(event:SelectedReportElementEvent):void {
			this.btn_deleteSelected.enabled = true;
		}
			
		private function onAddElementToReportCompleted(event:AddElementToReportCompletedEvent):void {
			this.refreshPrintJobButton();
			this.refreshOpenReportBuilderButton(true);
		}

		private function onClickDeleteSelectedButton():void {
			var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
			dc.deleteSelectedElement();
			this.btn_deleteSelected.enabled = false;
			this.refreshPrintJobButton();
			this.refreshReportsButtons();
		}
			
		private function onClickPrintJobButton(event:BeginPrintJobEvent):void {
			var printJob:FlexPrintJob = new FlexPrintJob();
			var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
			if (printJob.start()) {
				printJob.addObject(dc, FlexPrintJobScaleType.FILL_PAGE);
				printJob.send();
			}
		}
			
		private function onCreationCompleteComboBox():void {
			this.selectOptionFrom(this.cmbo_selectOptions);
		}
		
		private function onMovedReportBuilderSprite(event:MovedSpriteEvent):void {
			this.refreshOpenReportBuilderButton(true);
		}
		
		private function onCreationCompleteReportBuilderCanvas():void {
			var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
			dc.initCanvas(0xFFFFFF, 0xCCCCCC);
			dc.addEventListener(AddElementToReportEvent.TYPE_ADD_ELEMENT_TO_REPORT, onAddElementToReport);
			dc.addEventListener(SelectedReportElementEvent.TYPE_SELECTED_REPORT_ELEMENT, onSelectedReportElement);
			dc.addEventListener(AddElementToReportCompletedEvent.TYPE_ADD_ELEMENT_TO_REPORT_COMPLETED, onAddElementToReportCompleted);
			dc.addEventListener(RemovedImageElementEvent.TYPE_REMOVED_IMAGE_ELEMENT, onRemovedImageElement);
			dc.addEventListener(InitializeReportBuilderButtonsEvent.TYPE_INITIALIZE_REPORT_BUILDER_BUTTONS, onInitializeReportBuilderButtons);
			dc.addEventListener(FileUploadCompletedEvent.TYPE_FILE_UPLOAD_COMPLETE, onFileUploadCompleted);
			dc.addEventListener(MovedSpriteEvent.TYPE_MOVED_SPRITE, onMovedReportBuilderSprite);
		}
		
		private function onCloseDeleteReportConfirmation(event:CloseEvent):void {
			if (event.detail == 1) {
				var report:ReportVO;
		        for (var i:int = 0; i < reportsGrid.selectedItems.length; i++) {
		        	report = ReportVO(reportsGrid.selectedItems[i]);
		        	report.removeSelf(this.busy, this.onResultWebOrb, this.onFaultWebOrb);
		        	this.btn_deleteReports.enabled = false;
		        }
			}
			this.currentState = "Main";
		}
		
		private function deleteReports():void {
			AlertPopUp.confirm("Are you sure you want to delete the selected Report ?", "Confirmation", onCloseDeleteReportConfirmation);
        }
	        
		private function toggleSetSchedule(event:Event):void {
			if (event.target.selected) {
				if(reportsGrid.selectedItems != null){
					currentState="SetSchedule"
					reportsScheduleSetter.populateFields();
				} else {
					btn_setSchedule.selected=false;
					trace("set schedule button should not be clickable when no reports are selected");
				}
			} else {
				currentState = 'Main';
			}
		}
		
		private function onReportsSelection(event:ListEvent):void{
			syncModelCurrentReports();
			this.relabelOpenReportBuilderButton();
			this.refreshReportsButtons();
		}
		
		private function syncModelCurrentReports():void{
			if(reportsGrid.selectedItems != null){
				model.currentReports = reportsGrid.selectedItems;
				if(currentState=='SetSchedule'){
					reportsScheduleSetter.populateFields();
				}
			}
		}

		private function onItemEditEndReportsGrid(event:DataGridEvent):void {
			var myEditor:TextInput = TextInput(event.currentTarget.itemEditorInstance);
			var newVal:String = myEditor.text;
			
			var oldVal:String = event.currentTarget.editedItemRenderer.data[event.dataField]; 
			
			if ( (oldVal != newVal) && (newVal != null) && (newVal.length > 0) ) {
				var vo:ReportVO = ReportVO(this.reportsGrid.selectedItem);

				_weborbObj = new RemoteWebOrbObject("ReportWriter", "renameReport", busy, onResultWebOrb, onFaultWebOrb);
				var svc:RemoteObject = GetReportsCommand.svc.svc;
				_weborbObj.endpoint = svc.channelSet.currentChannel.endpoint;
				_weborbObj.doWebOrbServiceCall(newVal,vo);
			}
		}                               
		
		private function saveAsImageNamed(fileName:String = ""):void {
			if (fileName.length > 0) {
				var ar:Array = fileName.split(".");
				ar = ar[0].toString().split("/");
				fileName = ar[ar.length - 1];
				
				var dc:ReportBuilderCanvas = this.currentReportBuilderCanvas();
				var bitmapData:BitmapData = BitmapUtils.getBitmapFrom(dc);
				var bytes:ByteArray = BitmapUtils.encode(bitmapData);
	
				_weborbObj = new RemoteWebOrbObject("ReportWriter", "saveImage", busy, onResultWebOrb, onFaultWebOrb);
				var svc:RemoteObject = GetReportsCommand.svc.svc;
				_weborbObj.endpoint = svc.channelSet.currentChannel.endpoint;
				_weborbObj.doWebOrbServiceCall(fileName + ".png", model.user.username, bytes);
			}
		}
		
		private function getReportImageName():void {
			var popUp:PopUpTextPrompt = new PopUpTextPrompt;
			popUp.prompt = "Enter Image Name:";
			popUp.text = "Untitled";
			popUp.okHandler = function (newName:String):void {
				saveAsImageNamed(newName);
			}
			popUp.cancelHandler = onCancelPopUpTextPrompt;
			PopUpManager.addPopUp(popUp, this, false);
			popUp.x = this.btn_PrintJob.x + 50;
			popUp.y = 120;
		}

		private function onClickSaveAsButton(event:BeginSaveAsEvent):void {
			switch (event.destType) {
				case BeginSaveAsEvent.const_dest_image:
					this.getReportImageName();
				break;

				case BeginSaveAsEvent.const_dest_pdf:
				break;
			}
	//		AlertPopUp.info("Not yet implemented.");
		}
		
		private function onCreationCompletePrintButtons():void {
			this.btn_PrintJob.addEventListener(BeginPrintJobEvent.TYPE_BEGIN_PRINT_JOB, onClickPrintJobButton);
			this.btn_PrintJob.addEventListener(BeginSaveAsEvent.TYPE_SAVE_AS, onClickSaveAsButton);
		}
	]]></mx:Script>
	<mx:states>
		<mx:State name="Main">
			<mx:AddChild>
				<mx:VBox width="100%" height="100%">
					<mx:HBox width="100%">
						<mx:HBox>
							<mx:Label text="Report Management"/>
						</mx:HBox>
						<mx:HBox id="hbox_reportBuilderOptions" visible="false">
							<mx:Spacer width="10"/>
							<mx:ComboBox id="cmbo_selectOptions" dataProvider="{new ArrayCollection(this._selectionOptions)}" change="onChangeSelectOptionsComboBox(event)" creationComplete="onCreationCompleteComboBox()"/>
							<mx:Spacer width="10"/>
							<mx:Button id="btn_deleteSelected" label="Delete" toolTip="Delete the selected element." enabled="false" click="onClickDeleteSelectedButton()"/>
							<mx:Spacer width="10"/>
							<widgets:PrintButtons id="btn_PrintJob" enabled="false" creationComplete="onCreationCompletePrintButtons()"/>
						</mx:HBox>
						<mx:HBox width="10%">
							<mx:Button id="btn_newReportBuilder" label="New Report" visible="true" click="onClickNewReport()"/>
							<mx:Button id="btn_openReportBuilder" label="Open Report Builder" visible="false" click="onClickOpenReportBuilder()"/>
							<mx:Button id="btn_deleteReports" label="Delete" enabled="{this.reportsGrid.selectedItems.length > 0}" click="deleteReports()"/>
							<mx:Button id="btn_setSchedule"   label="Set Schedule"	enabled="false"	click="toggleSetSchedule(event)" toggle="true"/>
							<busy:Busy id="busy"/>
						</mx:HBox>
					</mx:HBox>
						<mx:ViewStack id="viewstack" width="100%" height="100%" selectedIndex="0">
							<mx:HBox id="reportsContainer" width="100%" height="100%">
									<mx:Canvas id="canvas1" label="Report Management" width="100%" height="100%">
										<mx:DataGrid id='reportsGrid' dataProvider="{model.reports}" editable="true" allowMultipleSelection="true" change="onReportsSelection(event)" itemEditEnd="onItemEditEndReportsGrid(event)" width="100%" height="100%">
											<mx:columns>
												<mx:DataGridColumn dataField="name" headerText="Name" editable="true"/>
												<mx:DataGridColumn dataField="next_scheduled_run" headerText="Next scheduled run time" labelFunction="epochToDate" editable="false"/>
											</mx:columns>
										</mx:DataGrid>
									</mx:Canvas>
							</mx:HBox>
							<mx:Canvas id="canvas2" label="Report Builder" width="100%" height="100%">
								<mx:HBox width="100%" height="100%">
									<palette:IconCanvas id="iconCanvas" width="100" height="100%" minWidth="100" creationComplete="onCreationCompleteIconCanvas()"/>
									<canvas:ReportBuilderCanvas id="reportBuilderCanvas" width="100%" height="100%" styleName="ReportBuilderCanvasStyle" creationComplete="onCreationCompleteReportBuilderCanvas()"/>
								</mx:HBox>
							</mx:Canvas>
						</mx:ViewStack>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="SetSchedule" basedOn="Main">
			<mx:AddChild relativeTo="{reportsContainer}" position="lastChild">
				<report:ReportScheduleSidebar id="reportsScheduleSetter" width="300" height="100%" removedEffect="{wipeOut}" addedEffect="{wipeIn}"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:WipeLeft id="wipeIn" duration="500"/>
	<mx:WipeRight id="wipeOut" duration="500"/>
</mx:Box>
